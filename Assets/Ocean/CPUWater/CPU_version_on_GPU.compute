#pragma kernel CalculateHeight


Texture2D<float4> _TimeSpectrum;
RWTexture2D<float4> _HeightMap;
uint _Size;
float _LengthScale, _Amplitude;
const float PI = 3.1415926535;

float2 Euler(float a)
{
    return float2(cos(a), sin(a));
}

float2 ComplexMult(float2 a, float2 b)
{
    return float2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

/* [numthreads(8,8,1)]
void CalculateHeight(uint3 id: SV_DISPATCHTHREADID){
    float halfN = _Size / 2.0f;
    
    float2 x = id.xy - halfN;

    float2 h = 0.0f;
    float3 normal = 0.0f;

    for (int m = 0; m < _Size; ++m) {
        float kz = 2.0f * PI * (m - halfN) / _LengthScale;
        for (int n = 0; n < _Size; ++n) {
            float kx = 2.0f * PI * (n - halfN) / _LengthScale;
            float2 K = float2(kx, kz) * 128;
            float kMag = length(K);
            float kdotx = dot(K, x);

            float2 c = Euler(kdotx);
            float2 htilde = ComplexMult(_TimeSpectrum[uint2(n, m)].xy, c);
            
            h += htilde;
            //normal += float3(-K.x * htilde.y, 0.0f, -K.y * htilde.y);
        }
    }

    //normal = float3(-normal.x, 1.0f, -normal.z);
    //normal = normalize(normal);
    
    _HeightMap[id.xy] = h.x;
    //_NormalTex[id.xy] = float4(normal, 0.0f);
} */


[numthreads(8,8,1)]
void CalculateHeight(uint3 id : SV_DispatchThreadID){

    float halfN = float(_Size)/ 2.0f;
    float2 idHalf = float2(id.xy) - halfN;

    float height = 0;
    for (uint x = 0; x < _Size; x++)
    {
        for (uint y = 0; y < _Size; y++)
        {
            float2 k = float2(x - halfN, y - halfN) * 2.0 * PI / _LengthScale * 100000;
            float4 spectrum = _TimeSpectrum[uint2(x,y)];

            float kdotx = dot(k, idHalf* 0.1);
            float2 c = Euler(kdotx);

            float2 htilde = ComplexMult(spectrum.xy, c);
            height += htilde.x * _Amplitude;
        }
    }
    _HeightMap[id.xy] = height;

}