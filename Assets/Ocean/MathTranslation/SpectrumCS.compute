// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel InitialSpectrum
#pragma kernel ConjugatedSpectrum
#pragma kernel TimeSpectrum

static const float PI = 3.14f;
static const float g = 9.81f;
static const float sigmaOverRho = 0.074e-3;


Texture2D<float2> _NoiseTex;
RWTexture2D<float4> _InitialSpectrumTex;
RWTexture2D<float4> _TimeSpectrumTex;
float _A = 0.08;
int _Size;
float _Length;
float2 _Wind;
float _Time;
float _RepeatTime;

float _LowCutoff;
float _HighCutoff;


uint _SpectrumType;




float PiersonMoskowitzPeakOmega(float u){
    float nu = 0.13;
    return 2 * PI * nu * g / u;
}

float NormalizationFactor(float s) {
    float s2 = s * s;
    float s3 = s2 * s;
    float s4 = s3 * s;
    if (s < 5) return -0.000564f * s4 + 0.00776f * s3 - 0.044f * s2 + 0.192f * s + 0.163f;
    else return -4.80e-08f * s4 + 1.07e-05f * s3 - 9.53e-04f * s2 + 5.90e-02f * s + 3.93e-01f;
}

// the form was presented by Longuet-Higgins et al 1963
float Cosine2s(float theta, float s) {
	return NormalizationFactor(s) * pow(abs(cos(0.5f * theta)), 2.0f * s);
}

// to calculate s, parameters kinda Hasselman et al 1980
float HasselmanSpread(float omega, float peakOmega){
    if (omega > peakOmega)
		return 9.77f * pow(abs(omega / peakOmega), -2.5f); //Hasselman defines last constant here as -2.33 - 1.45*(_Wind / c - 1.17)
	else
		return 6.97f * pow(abs(omega / peakOmega), 4.06f);
}

float DirectionSpectrum(float2 k) {
    float omega = length(k);
    float peakOmega = PiersonMoskowitzPeakOmega(length(_Wind));
    float theta = atan2(k.y,k.x);
    float swell = 0.1;
    float angle = 5;
	float s = HasselmanSpread(omega, peakOmega) + 16 * tanh(min(omega / peakOmega, 20)) * swell * swell;
	return lerp(2.0f / 3.1415f * cos(theta) * cos(theta), Cosine2s(theta - angle, s), 0);
}




float phillips(float2 k) {
    float k_length = length(k);
    if (k_length < 0.000001) return 0.0;
 
    float k_length2 = k_length * k_length;
    float k_length4 = k_length2 * k_length2;
 
    float k_dot_w = dot(normalize(k), normalize(_Wind));
    float k_dot_w2 = k_dot_w * k_dot_w;
 
    float w_length = length(_Wind);
    float L = w_length * w_length / g;
    float L2 = L * L;
     
    float damping = 0.001;
    float l2 = L2 * damping * damping;
 
    return _A * exp(-1.0 / (k_length2 * L2)) / k_length4 * k_dot_w2 * exp(-k_length2 * l2);
}


float PiersonMoskowitz(float2 k)
{
    float omega = length(k);
    float peakOmega = PiersonMoskowitzPeakOmega(length(_Wind));
	float oneOverOmega = 1 / omega;
	float peakOmegaOverOmega = peakOmega / omega;
	
	return 8.1e-3 * g * g * oneOverOmega * oneOverOmega * oneOverOmega * oneOverOmega * oneOverOmega
		* exp(-1.25 * peakOmegaOverOmega * peakOmegaOverOmega * peakOmegaOverOmega * peakOmegaOverOmega);
}

float dispersion(float kLen) {
    float w_0 = 2.0f * PI /_RepeatTime;
    return floor(sqrt(g * kLen) / w_0) * w_0;
}

float2 euler(float x){
    return float2(cos(x), sin(x));
}

float2 complexMultiply(float2 a, float2 b){
    return float2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

float ShortWavesFade(float kLength) {
    float fade = 0.1;
	return exp(-fade * fade * kLength * kLength);
}

[numthreads(8,8,1)]
void InitialSpectrum (uint3 id : SV_DispatchThreadID)
{
    float2 k = (float2(id.xy) - float2(_Size/2.0f, _Size/2.0f)) * PI / _Length;
    float kLength = length(k);

    if (_LowCutoff <= kLength && kLength <= _HighCutoff) {
        float2 random = _NoiseTex[id.xy];
        float spectrum = 1;
        if (_SpectrumType == 0){
            spectrum = phillips(k);
        } else if (_SpectrumType == 1){
            spectrum = PiersonMoskowitz(k) * DirectionSpectrum(k);
        }
        float2 htilde0 = random * sqrt(spectrum/2.0f);
        _InitialSpectrumTex[id.xy] = float4(htilde0, 0, 0);
    } else {
        _InitialSpectrumTex[id.xy] = float4(0, 0, 0, 0);
    }
}

[numthreads(8,8,1)]
void ConjugatedSpectrum (uint3 id : SV_DispatchThreadID){
    //somewhere -1?
    int modn = (_Size - id.x) % _Size;
    int modm = (_Size - id.y) % _Size;

    float4 initialValue =  _InitialSpectrumTex[id.xy];
    float4 initialValueConj =  _InitialSpectrumTex[uint2(modn, modm)];

    _InitialSpectrumTex[id.xy] = float4(initialValue.xy, initialValueConj.x, initialValueConj.y);
    //_InitialSpectrumTex[id.xy] = float4(id.xy/float(_Size), modn/float(_Size), modm/float(_Size));
}


float2 htilde(float t, uint n_prime, uint m_prime){
    float4 initialSpectrumVal = _InitialSpectrumTex[uint2(n_prime, m_prime)];
    float2 k = (float2(n_prime, m_prime) - float2(_Size/2.0f, _Size/2.0f)) * PI / _Length;
    float disp = dispersion(length(k)) * t;
    float2 exponent = euler(disp);
    float2 ht0 = complexMultiply(initialSpectrumVal.xy, exponent);
    float2 ht01 = complexMultiply(initialSpectrumVal.zw, float2(exponent.x, -exponent.y));
    return ht0 + ht01;

}

[numthreads(8,8,1)]
void TimeSpectrum(uint3 id : SV_DispatchThreadID){
    _TimeSpectrumTex[id.xy] = float4(htilde(_Time, id.x, id.y),0,0);
}
